/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.HealthcareInterface.doctor;


import healthcare.enterprise.Enterprise;
import healthcare.enterprise.healthCare.DoctorOrganization;
import healthcare.network.Network;
import healthcare.userAccount.UserAccount;
import healthcare.workQueue.WorkRequest;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author saura
 */
public class StatisticsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form StatisticsJPanel
     */
   JPanel userProcessContainer;
   WorkRequest patientrequest;
   Network network;
   Enterprise enterprise;
   UserAccount userAccount;
   DoctorOrganization organization;

    public StatisticsJPanel(JPanel userProcessContainer, UserAccount userAccount, DoctorOrganization organization, Enterprise enterprise, Network network) {
        initComponents();         
        this.userProcessContainer = userProcessContainer;
        this.network = network;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.organization = organization;
        Loadbarchart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barchartRequeststatistics = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 204));

        barchartRequeststatistics.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel6.setBackground(new java.awt.Color(153, 204, 255));

        jLabel6.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("View Statistics");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(76, Short.MAX_VALUE)
                .addComponent(barchartRequeststatistics, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(barchartRequeststatistics, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(67, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barchartRequeststatistics;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel6;
    // End of variables declaration//GEN-END:variables

    private void Loadbarchart() {
        if (!(enterprise instanceof Enterprise)) {
            JOptionPane.showMessageDialog(null, "Please add Enterprises.");
            return;
        };
           int count =0;
       
        int medhistcollected_count = 0;
        int resultfound_count = 0;
        int assigntodoc_count = 0;
        int sent_count = 0;
         int assigntophysio_count = 0;
           int assigntopsy_count = 0;
         //Assigned to psychiatrist
         for(WorkRequest workreq :organization.getWorkQueue().getWorkRequestList())
        {
            if(workreq.getStatus().equalsIgnoreCase("sent"))
            {
                sent_count++;
            }
            else if(workreq.getStatus().equalsIgnoreCase("result found"))
            {
                resultfound_count++;
            }
             else if(workreq.getStatus().equalsIgnoreCase("assigned to doc"))
            {
                assigntodoc_count++;
            }
             else if(workreq.getStatus().equalsIgnoreCase("Med Hist Collected For Lab"))
            {
                medhistcollected_count++;
            }
             else if(workreq.getStatus().equalsIgnoreCase("Assigned to pharmacotherapist"))
            {
                assigntophysio_count++;
            }
             else if(workreq.getStatus().equalsIgnoreCase("Assigned to psychiatrist"))
            {
                assigntopsy_count++;
            }
            
           // workreq
        }
        DefaultCategoryDataset DCategorydata = new DefaultCategoryDataset();

        DCategorydata.setValue(sent_count, "sent", "sent");        
        DCategorydata.setValue(assigntodoc_count, "assignedto doc", "assignedto doc");
        DCategorydata.setValue(resultfound_count, "Result Found", "Result Found");
        DCategorydata.setValue(medhistcollected_count, "Med hist collected lab", "Med hist collected lab");
        DCategorydata.setValue(assigntophysio_count, "Assigned to pharmacotherapist", "Assigned to pharmacotherapist");
        DCategorydata.setValue(assigntophysio_count, "Assigned to psychiatrist", "Assigned to psychiatrist");


        JFreeChart jfreechart = ChartFactory.createBarChart3D("PATIENT REQUEST STATISTICS", "ENTITIES", "COUNT", DCategorydata, PlotOrientation.VERTICAL, true, true, false);

        CategoryPlot plot = jfreechart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.BLACK);

        ChartPanel chartp = new ChartPanel(jfreechart, true);

        chartp.setVisible(true);
        barchartRequeststatistics.removeAll();
        barchartRequeststatistics.setLayout(new java.awt.BorderLayout());
        barchartRequeststatistics.add(chartp, BorderLayout.CENTER);
        barchartRequeststatistics.validate();
    }
}
