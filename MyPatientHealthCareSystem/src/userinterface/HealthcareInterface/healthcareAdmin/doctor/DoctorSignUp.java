 /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.HealthcareInterface.healthcareAdmin.doctor;

import healthcare.Ecosystem;
import healthcare.enterprise.Enterprise;
import healthcare.enterprise.healthCare.DoctorRole;
import healthcare.network.Network;
import healthcare.organization.Organization;
import healthcare.organization.OrganizationDirectory;
import healthcare.person.Person;
import healthcare.role.Role;
import healthcare.userAccount.UserAccount;
import java.awt.Color;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import userinterface.SendMail;

/**
 *
 * @author adity
 */
public class DoctorSignUp extends javax.swing.JPanel {

    /**
     * Creates new form DoctorSignUp
     *
     */
    boolean emptyValidationStatus = true;
    boolean validationCheck = true;
    Ecosystem ecosystem;  
    OrganizationDirectory orgList;
    public DoctorSignUp(Ecosystem ecosystem, OrganizationDirectory orgList) {
        initComponents();
        this.ecosystem = ecosystem;
        this.orgList = orgList;
        populateOrganizationComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSignUp = new javax.swing.JButton();
        lblState = new javax.swing.JLabel();
        lblZipCode = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblEnterprise = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        txtState = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        txtZipcode = new javax.swing.JTextField();
        lblCity = new javax.swing.JLabel();
        lblSpeciality = new javax.swing.JLabel();
        cboxSpeciality = new javax.swing.JComboBox<>();
        lblPhoneNo = new javax.swing.JLabel();
        txtPhoneNo = new javax.swing.JTextField();
        organizationJComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSignUp.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        btnSignUp.setText("Sign Up");
        btnSignUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignUpActionPerformed(evt);
            }
        });
        add(btnSignUp, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 490, -1, -1));

        lblState.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        lblState.setText("State");
        add(lblState, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 360, -1, -1));

        lblZipCode.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        lblZipCode.setText("Zipcode");
        add(lblZipCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 400, -1, -1));
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 120, 238, -1));
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 160, 238, -1));

        lblTitle.setFont(new java.awt.Font("Georgia", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Create Doctor Profile");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(606, 23, 610, -1));

        lblName.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        lblName.setText("Name");
        add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 120, -1, -1));

        lblUsername.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        lblUsername.setText("Email");
        add(lblUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 160, -1, -1));
        add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 280, 238, -1));

        lblEnterprise.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        lblEnterprise.setText("Organization");
        add(lblEnterprise, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 200, -1, -1));

        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });
        add(txtCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 320, 238, -1));
        add(txtState, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 360, 238, -1));

        lblAddress.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        lblAddress.setText("Address");
        add(lblAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 280, -1, -1));
        add(txtZipcode, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 400, 238, -1));

        lblCity.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        lblCity.setText("City");
        add(lblCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 320, -1, -1));

        lblSpeciality.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        lblSpeciality.setText("Speciality");
        add(lblSpeciality, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 240, -1, -1));

        cboxSpeciality.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        cboxSpeciality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cardiologist", "Oncologist", "Pediatrician", "Neurologists", "Gastroenterologist", "Pulmonologist", "Dentist" }));
        add(cboxSpeciality, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 240, 238, -1));

        lblPhoneNo.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        lblPhoneNo.setText("Phone No");
        add(lblPhoneNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 440, -1, -1));
        add(txtPhoneNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 440, 238, -1));

        organizationJComboBox.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        organizationJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Doctor", "Nurse", "Patient" }));
        add(organizationJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 200, 238, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/DoctorSignUp.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 900));
    }// </editor-fold>//GEN-END:initComponents

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    private void btnSignUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignUpActionPerformed
        // TODO add your handling code here:
        try {
            if (EmpytyFieldValidation()) {

                if (RegexValidation()) {

                    String name = txtName.getText();
                    String emailId = txtEmail.getText();
                    String Speciality = cboxSpeciality.getSelectedItem().toString();
                    String HospitalName = organizationJComboBox.getSelectedItem().toString();
                    String Address = txtAddress.getText();
                    String City = txtCity.getText();
                    String State = txtState.getText();
                    long Zipcode = Long.parseLong(txtZipcode.getText());
                    long cellPhoneNumber = Long.parseLong(txtPhoneNo.getText());

                    Random random = new Random();
                    int doctorID = random.nextInt((9999 - 100) + 1) + 10;

                    String username = name.substring(0, 3) + String.valueOf(doctorID);
                    String password = name + String.valueOf(random.nextInt((9999 - 100) + 1) + 10);
                    
                    DoctorRole role  = new DoctorRole();
                    role.setHospitalName(HospitalName);
                    role.setSpeciality(Speciality);
                        
                    Organization organization = (Organization) organizationJComboBox.getSelectedItem();
                    Person p = organization.getPersonDirectory().createAndAddPerson(username, Address, City, State, Zipcode, cellPhoneNumber);           
                    UserAccount account = organization.getUserAccountDirectory().createUserAccount(doctorID,username, password, p, role, emailId);
                    
                    JOptionPane.showMessageDialog(this, "Doctor Registered Successfully.Your New Username:" + username + " and password: " + password + ",Please save this Id for furture reference.");

                    SendMail s = new SendMail();
                    s.sendUserRegisterEmail(emailId, username, password);

                } else {
                    JOptionPane.showMessageDialog(this, "Some Error in entered data.Please check over the red fields to know more.");
                    validationCheck = true;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Some Error in entered data. Please check over the red fields to know more.");
                emptyValidationStatus = true;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Doctor not registered, Try again");
            System.out.println(e.toString());
            emptyValidationStatus = true;
        }
    }                                            

    private boolean RegexValidation() {
        if(!txtName.getText().matches("^[a-zA-Z ]+$"))
        {
            txtName.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtName.setToolTipText("Please enter only characters and space.");
            validationCheck=false;
        }
        
        if(txtName.getText().matches("^[a-zA-Z ]+$"))
        {
            txtName.setBorder(BorderFactory.createLineBorder(Color.BLUE, 0));
        }
        
        if(!txtState.getText().matches("^[a-zA-Z ]+$"))
        {
            txtState.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtState.setToolTipText("Please enter only characters and space.");
            validationCheck=false;
        }
        
        if(txtState.getText().matches("^[a-zA-Z ]+$"))
        {
            txtState.setBorder(BorderFactory.createLineBorder(Color.BLUE, 0));
        }
        
        if(!txtCity.getText().matches("^[a-zA-Z ]+$"))
        {
            txtCity.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtCity.setToolTipText("Please enter only characters and space.");
            validationCheck=false;
        }
        
        if(txtCity.getText().matches("^[a-zA-Z ]+$"))
        {
            txtCity.setBorder(BorderFactory.createLineBorder(Color.BLUE, 0));
        }
        
        
        if(!txtEmail.getText().matches("^[A-Za-z0-9+_.-]+@(.+)$"))
        {
            txtEmail.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtEmail.setToolTipText("Please enter a valid Email Address in the form abc@xyy.com");
            validationCheck=false;
        }
        
        if(txtEmail.getText().matches("^[A-Za-z0-9+_.-]+@(.+)$"))
        {
            txtEmail.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        
        if(!txtPhoneNo.getText().matches("^[0-9]{10}$"))
        {
            txtPhoneNo.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtPhoneNo.setToolTipText("Please enter a 10 digit number");
            validationCheck=false;
        }
        
        if(txtPhoneNo.getText().matches("^[0-9]{10}$"))
        {
            txtPhoneNo.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        
        if(!txtZipcode.getText().matches("^[0-9]{5}(?:-[0-9]{4})?$"))
        {
            txtZipcode.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtZipcode.setToolTipText("Please enter a valid zip code number");
            validationCheck=false;
        }
         if(txtZipcode.getText().matches("^[0-9]{5}(?:-[0-9]{4})?$"))
        {
            txtZipcode.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        

        return validationCheck;
    }
    
    private boolean EmpytyFieldValidation() {
        if(txtName.getText().equals(null) || txtName.getText().trim().isEmpty() )
        {
            txtName.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtName.setToolTipText("This Field Cannot be empty");
            emptyValidationStatus= false;
        }
        if(!txtName.getText().equals(null) && !txtName.getText().trim().isEmpty() )
        {
            txtName.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        
        if(txtAddress.getText().equals(null)|| txtAddress.getText().trim().isEmpty())
        {
            txtAddress.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtAddress.setToolTipText("This Field Cannot be empty");
            emptyValidationStatus= false;
        }
        if(!txtAddress.getText().equals(null) && !txtAddress.getText().trim().isEmpty())
        {
            txtAddress.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
           
        }
        
        if(txtCity.getText().equals(null)|| txtCity.getText().trim().isEmpty())
        {
            txtCity.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtCity.setToolTipText("This Field Cannot be empty");
            emptyValidationStatus= false;
        }
        if(!txtCity.getText().equals(null) && !txtCity.getText().trim().isEmpty())
        {
            txtCity.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
           
        }
        
        if(txtState.getText().equals(null)|| txtState.getText().trim().isEmpty())
        {
            txtState.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtState.setToolTipText("This Field Cannot be empty");
            emptyValidationStatus= false;
        }
        if(!txtState.getText().equals(null) && !txtState.getText().trim().isEmpty())
        {
            txtState.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
           
        }
        if(txtPhoneNo.getText().equals(null) || txtPhoneNo.getText().trim().isEmpty())
        {
            txtPhoneNo.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtPhoneNo.setToolTipText("This Field Cannot be empty");
            emptyValidationStatus=false;
        }
        if(!txtPhoneNo.getText().equals(null) && !txtPhoneNo.getText().trim().isEmpty())
        {
            txtPhoneNo.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        if(txtEmail.getText().equals(null) || txtEmail.getText().trim().isEmpty() )
        {
            txtEmail.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtEmail.setToolTipText("This Field Cannot be empty");
            emptyValidationStatus= false;
        }
        
        if(!txtEmail.getText().equals(null) && !txtEmail.getText().trim().isEmpty() )
        {
            txtEmail.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        if(txtZipcode.getText().equals(null) || txtZipcode.getText().trim().isEmpty())
        {
            txtZipcode.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtZipcode.setToolTipText("This Field Cannot be empty");
            emptyValidationStatus=false;
        }
        if(!txtZipcode.getText().equals(null) && !txtZipcode.getText().trim().isEmpty())
        {
            txtZipcode.setBorder(BorderFactory.createLineBorder(Color.BLUE, 1));
        }
        
        
        return emptyValidationStatus;
    
    }//GEN-LAST:event_btnSignUpActionPerformed

    private void populateOrganizationComboBox() {
        organizationJComboBox.removeAllItems();

        for (Organization organization : orgList.getOrganizationList()){
            organizationJComboBox.addItem(organization);
        }
    }

//    private void populateEnterpriseComboBox(Network network) {
//        organizationJComboBox.removeAllItems();
//
//        for (Enterprise enterprise : network.getEnterpriseMasterList().getEnterpriseList()) {
//            organizationJComboBox.addItem(enterprise);
//        }
//
//    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSignUp;
    private javax.swing.JComboBox<String> cboxSpeciality;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblEnterprise;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhoneNo;
    private javax.swing.JLabel lblSpeciality;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblZipCode;
    private javax.swing.JComboBox organizationJComboBox;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhoneNo;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtZipcode;
    // End of variables declaration//GEN-END:variables
}
